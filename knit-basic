#!/usr/bin/env bash

featimg=''
# options
while getopts "bi:" myopt; do
    case $myopt in
        b) backup=T;;
        i) featimg=$OPTARG;;
        *) backup=F;;
    esac
done
shift $(( $OPTIND - 1))

if test $# -ne 3; then
    cat <<EOF
Usage:
`basename $0` [-b] [-i path/to/featimg.png] [path/to/]post-name.Rmd jekyll/dir project/dir
`basename $0` [-b] [-i path/to/featimg.png] [path/to/]post-name.Rmd jekyll/dir -

Use knitrscript ~/src/myknit.R to knit post-name.Rmd into post-name.md,
then integrate post-name.md into the jekyll site...
    under jekyll/dir/project/dir (first form of usage)
    or
    under jekyll/dir (second form of usage when the last argument is '-').

Output:
1. jekyll/dir/[project/dir/]_posts/post-name.md
2. jekyll/dir/[project/dir/]R/post-name/post-name.Rmd
3. jekyll/dir/[project/dir/]R/post-name/figure/*

Options:
-b: do backup
-i: path to feature image

Details:
Integration into the jekyll site means more than merely placing the output files
(post-name.md and figures) into specific subdirectories under jekyll/dir.
To work with jekyll, some essential modifications to the markup of post-name.md
are carried out:
1. fix the relative url of the 'figure' directory in the src attribute of
    <img> tags (old url: figure; new url: prefix="{{ site.baseurl }}/$relRfigdir")
2. add a <script> tag for MathJax support

Additionally, with the '-p' option a symbolic link to jekyll/dir/[project/dir/]R/post-name/figure/
is created in the input directory (path/to in path/to/post-name.Rmd).
EOF
exit
fi

# input args
notebookpath=$1
jekylldir=$2
case $3 in
    -) relprojectdir='';;
    *) relprojectdir=$3;;
esac

if echo $notebookpath | grep '\.Rmd$'; then
    extension=".Rmd"
elif echo $notebookpath | grep '\.ipynb$'; then
    extension=".ipynb"
else
    echo "Currently only .Rmd and .ipynb files are supported.  Exiting" 1>&2
    exit 1
fi

# this generates an .md in the directory of the input .Rmd
knitrscript=$HOME/src/myknit.R 

# directory of input .Rmd; this will hold intermediate dirs and files
postname=`basename $notebookpath $extension`
indir=`dirname $notebookpath`
cd $indir || { echo "`basename $0`: could not locate directory $indir" 1>&2; exit 1; }
# figure is a symlink if the script has already been run successfully;
# otherwise could be a directory; in any case, it will be automatically removed!
rm -rf figure
notebook="$postname$extension"
md="$postname.md"

# make output directories if necessary
projectdir=$jekylldir/$relprojectdir
test -d $projectdir || { echo "`basename $0`: could not locate directory $projectdir" 1>&2; exit 1; }


# function that integrates newly generated .md and figures into jekyll site
post2jekyll () {
    md=$1 notebook=$2 jekylldir=$3 relprojectdir=$4 featimg=${5:-default}

    # set up paths and variables, ensure that dirs exist
    absprojectdir=$jekylldir/$relprojectdir
    postname=`basename $md .md`
    if test -z $relprojectdir; then
        relRdir=R/$postname
    else
        relRdir=$relprojectdir/R/$postname
    fi
    # absolute path to R-related or R-generated files and directories (e.g. .Rmd, 'figure')
    absRdir=$absprojectdir/R/$postname
    test -d $absRdir || mkdir -p $absRdir
    # duplicate Rmd only in backup mode
    case $backup in
        T) cp $notebook -t $absRdir;;
    esac

    # subdirectory for figures with $absRdir
    relRfigdir=$relRdir/figure
    # for ipynb
    case $extension in
        '.ipynb')
            Pyfigdir=${postname}_files
            if test -d $Pyfigdir; then mv $Pyfigdir figure; fi
            ;;
    esac

    absRfigdir=$jekylldir/$relRfigdir
    # replace absRfigdir with the newly generated figure (if present)
    test -d $absRfigdir && rm -rf $absRfigdir
    if test -d figure; then
        if test $featimg != default; then
            featimg="`basename $featimg`"
            figDir=named-figure
        else
            # the first .png file we find will be the "featimg"
            cd figure; set *.png; cd ..
            featimg=$1
            figDir=figure
        fi
        case $extension in
            '.ipynb') cp_mv_cmd="cp -r";;
            '.R') cp_mv_cmd=mv;;
        esac
        $cp_mv_cmd $figDir $absRfigdir
        # only create symlink in backup mode
        case $backup in
            T)
                if test -h nbfigure; then unlink nbfigure; fi
                ln -s $absRfigdir nbfigure
                ;;
        esac
    else
        featimg=''
    fi

    # prepare and give the .md post to jekyll
    abspostdir=$absprojectdir/_posts
    test -d $abspostdir || mkdir -p $abspostdir
    postmd=$abspostdir/$postname.md
    mv -f $md $postmd
    # hack .md to fix its links to images
    prefix="{{ site.baseurl }}/$relRfigdir"
    # ipynb specific hacks
    case $extension in
        '.ipynb')
            # turn single $ characters to $$ but leave $$ as $$
            sed -i "/^!\[png\]/ s:$Pyfigdir:$prefix:" $postmd
            sed -i "s/\(.\)$/\1 /" $postmd
            sed -i "s/\$\([^$]\)/\$\$\1/g" $postmd
            sed -i "s/ $//" $postmd
            sed -i "s/\$\{3\}/\$\$/g" $postmd
            # add preamble
            body=`tempfile`
            mv $postmd $body
            preamble=`tempfile`
            cat > $preamble <<EOF
---
layout: default
tags: []
title:
featimg: $featimg
---
EOF

            cat $preamble $body > $postmd && rm $preamble $body
            ;;
        '.Rmd')
            sed -i "/plot of chunk/ s:figure:$prefix:" $postmd
            ;;
    esac

    echo '<!-- MathJax scripts -->' >> $postmd
    echo '<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>' >> $postmd
    # write protection to emphasize that $postmd is generated by a script and not to be edited manually
    chmod -w $postmd
}

if test $extension == '.Rmd'; then
    knitcmd="Rscript $knitrscript"
elif test $extension == '.ipynb'; then
    knitcmd="jupyter nbconvert --to markdown"
fi

# knit the .Rmd to .md
#if $knitcmd $notebook; then
if $knitcmd $notebook && post2jekyll $md $notebook $jekylldir $relprojectdir $featimg; then
    cd $jekylldir && bundle exec jekyll build --incremental
else
    echo "`basename $0`: error; check $indir for intermediate files" 1>&2
    exit 1
fi
