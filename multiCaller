#!/usr/bin/env bash

# Apply one or more variant callers to the BAM pair caseBAM and controlBAM.
# Callers: somaticSniper strelka2Germline2s strelka2Somatic lofreqSomatic TNseq

type=Somatic # or Germline
numproc=8
refseq=$REFSEQ
outputDir=$PWD
outputType=z
dbsnp=$DBSNP_ALL 
PostprocessOnly=false
gatkBundle=$GATK_BUNDLE

helpfile=`mktemp`
cat >> $helpfile <<EOF

Usage:
`basename $0` [-t type] [-p numproc] [-r refseq] -1 caseBAM -2 controlBAM [-a caseSample] [-b controlSample] [-o oututDir] [-O outputType] [-d dbsnp] [-g gatkBundle] [-x] [-P] [caller_1 [... [caller_n]]]

Options:
    t) type ($type): Somatic|Germline
    p) numproc ($numproc): number of threads
    r) refseq ($refseq): reference sequence
    1) caseBAM (no default): case.bam
    2) controlBAM (no default): control.bam
    a) caseSample (obtained from caseBAM): name of case sample 
    b) controlSample (obtained from controlBAM): name of control sample 
    o) outputDir ($outputDir): output directory
    O) outputType ($outputType): v--VCF, z--VCF.gz
    d) dbsnp ($dbsnp): path to dbsnp
    g) gatkBundle ($gatkBundle): path to the GATK bundle
    x) exomeOpt (flag): with -x strelka2 will analyze only the exome
    P) PostprocessOnly (flag): with -P only post processing but no calling is done
EOF

if test $# -eq 0; then
    cat $helpfile; exit
fi
rm $helpfile

while getopts 't:p:r:1:2:a:b:o:O:d:g:xP' myopt; do
    case $myopt in
        t) type=$OPTARG;;
        p) numproc=$OPTARG;;
        r) refseq=$OPTARG;;
        1) caseBAM=$(realpath $OPTARG);;
        2) controlBAM=$(realpath $OPTARG);;
        a) caseSample=$OPTARG;;
        b) controlSample=$OPTARG;;
        o) outputDir=$OPTARG;;
        O) outputType=$OPTARG;;
        d) dbsnp=`realpath $OPTARG`;;
        g) gatkBundle=`realpath $OPTARG`;;
        x) exomeOpt='--exome';;
        P) PostprocessOnly=true;;
    esac
done
shift $(($OPTIND - 1))
# default set of callers; other callers: lofreqSomatic, TNseq
callers="${@:-somaticSniper strelka2Germline2s strelka2Somatic}"

SNfromBAMheader () {
    BAM=$1
    SN=$(samtools view -H $BAM |
    sed -n '/^@RG/ { s/^.*SM:\(\S*\)\s.*$/\1/; p }' |
    sort -u)
    numSamplesinBAM=$(echo $SN | wc -w)
    if test $numSamplesinBAM -ne 1; then
        echo "$BAM contains $numSamplesinBAM samples instead of 1.  Exiting" 1>&2
        exit 1
    fi
    echo $SN
}

Postproc () {
    if ! test -d $outputDir/snvs; then
        mkdir -p $outputDir/snvs
    fi
    if ! test -d $outputDir/indels; then
        mkdir -p $outputDir/indels
    fi
    outsnvs=$outputDir/snvs/$caller.vcf.gz
    bcftools view -o $outsnvs -O z -v snps $insnvs
    outindels=$outputDir/indels/$caller.vcf.gz
    bcftools view -o $outindels -O z -v indels $inindels
    # for some callers tabix is necessary
    tabix $outsnvs
    tabix $outindels
}

caseSample=${caseSample:-$(SNfromBAMheader $caseBAM)}
controlSample=${controlSample:-$(SNfromBAMheader $controlBAM)}


# CALLER AND POSTPROCESSING FUNCTIONS

# lofreqSomatic

lofreqSomaticCaller () {
    outprefix='out-'
    # run lofreq
    cmd="somatic -n $controlBAM -t $caseBAM -f $refseq --threads $numproc -o $outprefix -d $dbsnp"
    eval "/opt/lofreq_star/current/lofreq $cmd"
    # output file names
    vcf=${outprefix}somatic_final.snvs.vcf.gz
    vcfbn=`basename $vcf .vcf.gz`
    outvcf=$vcfbn-samples.vcf.gz
    # add samples and write to outvcf
    addsample=/opt/lofreq_star/current/lofreq2_add_sample.py
    $addsample -i $vcf -o $outvcf -b $controlBAM $caseBAM
    # my way
    caseDefaultSample=`basename $caseBAM`
    controlDefaultSample=`basename $controlBAM`
    $HOME/bin/rename-case-control-samples -a $caseSample -A $caseDefaultSample -b $controlSample -B $controlDefaultSample $outvcf
}

lofreqSomaticPostproc () {
    insnvs=$callerDir/out-somatic_final.snvs.vcf.gz
    inindels=$callerDir/out-somatic_final.indels.vcf.gz
}

# somaticSniper

somaticSniperCaller () {
    outprefix='out'
    vcf="$outprefix.vcf"
    cmd="bam-somaticsniper -F vcf -f $REFSEQ $caseBAM $controlBAM $vcf"
    eval $cmd
    $HOME/bin/rename-case-control-samples -a $caseSample -b $controlSample $vcf
}

somaticSniperPostproc () {
    insnvs=$callerDir/out.vcf
    inindels=$insnvs
}

# strelka2 general

strelka2 () {
    # some variables
    jobOpt="-j $numproc"
    STRELKA_INSTALL_PATH=/usr/local
    configScript="${STRELKA_INSTALL_PATH}/bin/configureStrelka${type}Workflow.py"
    analysisDir=`realpath $PWD`
    variantsdir=$analysisDir/results/variants/
    # build config command
    configcmd="$configScript \
        --referenceFasta=$refseq \
        $exomeOpt \
        --runDir=$analysisDir"
    case $type in
        Somatic) configcmd="$configcmd --normalBam=$controlBAM --tumorBam=$caseBAM";;
        Germline) configcmd="$configcmd --bam=$controlBAM --bam=$caseBAM";;
    esac
    # run
    eval $configcmd
    $analysisDir/runWorkflow.py -m local $jobOpt
    # rename case and control samples for Somatic caller
    case $type in
        Somatic)
            cd $variantsdir
            for vcf in *.vcf.gz; do
                echo $vcf
                bcftools view -h $vcf | grep '^#CHROM'
                $HOME/bin/rename-case-control-samples -a $caseSample -b $controlSample $vcf
                bcftools index --tbi $vcf
            done
            cd $analysisDir
            ;;
    esac
}

# strelka2Germline2s

strelka2Germline2sCaller () {
    type=Germline
    strelka2
}

strelka2Germline2sPostproc () {
    insnvs=$callerDir/results/variants/variants.vcf.gz
    inindels=$insnvs
}

# strelka2Somatic

strelka2SomaticCaller () {
    type=Somatic
    strelka2
}

strelka2SomaticPostproc () {
    insnvs=$callerDir/results/variants/somatic.snvs.vcf.gz
    inindels=$callerDir/results/variants/somatic.indels.vcf.gz
}

# TNseq

TNseqCaller () {
    export SENTIEON_INSTALL_DIR=/opt/sentieon-genomics/current/
    export SENTIEON_LICENSE="/opt/sentieon-genomics/license/Mount_Sinai_School_of_Medicine_eval.lic"
    sentieon_executable=/opt/sentieon-genomics/current/bin/sentieon
    b37dir=$gatkBundle/b37-unpacked
    bqsr_sites=" -k $b37dir/Mills_and_1000G_gold_standard.indels.b37.vcf \
        -k $b37dir/1000G_phase1.indels.b37.vcf \
        -k $b37dir/dbsnp_138.b37.vcf"
    caseTable=`basename $caseBAM .bam`.qcal.table
    controlTable=`basename $controlBAM .bam`.qcal.table
    # BQSR
    $sentieon_executable driver \
        -t $numproc -r $refseq -i $caseBAM \
        --algo QualCal $bqsr_sites $caseTable
    $sentieon_executable driver \
        -t $numproc -r $refseq -i $controlBAM \
        --algo QualCal $bqsr_sites $controlTable
    # call variants with TNhaplotyper (mutect2)
    $sentieon_executable driver \
        -t $numproc -r $refseq -i $caseBAM -i $controlBAM \
        -q $caseTable -q $controlTable \
        --algo TNhaplotyper \
        --tumor_sample $caseSample --normal_sample $controlSample tnseq.vcf
}

TNseqPostproc () {
    insnvs=$callerDir/tnseq.vcf
    inindels=$insnvs
}

for caller in $callers; do
    callerDir="$outputDir/$caller"
    # create output directory unless it already exists and change to it
    if test -d $callerDir
    then :
    else mkdir $callerDir
    fi
    saveDir=$PWD
    cd $callerDir
    # record runtime and redirect STDOUT and STDERR to log file
    if ! $PostprocessOnly; then
        ( time -p ${caller}Caller ) &>$caller.log
    fi
    ${caller}Postproc
    Postproc
    cd $saveDir
done
